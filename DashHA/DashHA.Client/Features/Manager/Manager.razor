@page "/manager"
@using DashHA.Client.Services
@using DashHA.Shared
@using System.Runtime.InteropServices;

@rendermode @(new InteractiveAutoRenderMode(false))
@* @rendermode @(new InteractiveWebAssemblyRenderMode(false)) *@
@* @rendermode @(new InteractiveServerRenderMode(false)) *@
@inject IJSRuntime JSRuntime


@inject IMqttMessageService MqttMessageService

@* @implements IAsyncDisposable *@

@inject NavigationManager NavigationManager

@* @rendermode InteractiveAuto *@
@* @rendermode InteractiveWebAssembly *@

@* @attribute [Authorize] *@

@* <div class="message-info-box"> *@

@* </div> *@


<TopBarMudBlazor />

<div class="manager">

    <div class="message-info">
        <div class="message-info-box ">
            @if (!string.IsNullOrEmpty(infoMessage.Message))
            {
                <MudPaper Outlined="true" Square="true" Elevation="3" Class="p-4 rounded-lg" Style="border: 1px solid #555; background-color: #2e2e2e; color: white;">

                    <MudText Class="text-sm sm:text-base md:text-lg"
                    Typo="Typo.h5"
                    Color="@(infoMessage.Success ? Color.Success : Color.Error)">
                        <MudIcon Icon="@(infoMessage.Success ? Icons.Material.Filled.CheckCircle : Icons.Material.Filled.Error)"
                        Color="@(infoMessage.Success ? Color.Success : Color.Error)"
                        Size="Size.Medium" />

                        @infoMessage.Message

                    </MudText>
                </MudPaper>

            }
            else
            {

                @* <MudAlert Severity="Severity.Normal" Variant="Variant.Filled">Logs no available.</MudAlert> *@

            }
        </div>
    </div>

    <section class="bg-gradient-to-br from-indigo-800 via-purple-800 to-pink-700 text-white min-h-[calc(100vh-8vh)] md:min-h-[calc(100vh-8vh)] ">


        <div class="max-w-7xl " style="margin: 0 auto;">

            <MudPaper Outlined="true" Square="true" class="pa-4" Style="border: 1px solid #555; background-color: #2e2e2e; color: white;">


                <MudPaper Elevation="3"
                Class="py-2 px-4 my-2 mt-1 rounded-lg"
                Style="max-height: 50vh ; overflow-y: auto; border: 1px solid #555; background-color: #2e2e2e; color: white; position: relative;">
                    <div style="display: flex; flex-direction: row; justify-content: space-between; padding: 5px 10px;">
                        <div style="position: relative; margin: 10px 0;">
                            @if (isClient)
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Computer" Color="Color.Info" />
                                <MudText Color="Color.Success" Style="margin: 0; padding: 0;  display: inline-block; font-size: 1rem;">@platform</MudText>

                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.Storage" Color="Color.Success" />
                                <MudText Color="Color.Info" Style="margin: 0; padding: 0; display: inline-block; font-size: 1rem;">@platform</MudText>
                            }
                        </div>

                        <div style="position: relative; margin: 10px 0;">
                            @if (!OperatingSystem.IsBrowser())
                            {
                                <MudIcon Icon="@Icons.Material.Filled.FlashOn" Color="Color.Info" />
                                <MudText Color="Color.Warning" Style="margin: 0; padding: 0;  display: inline-block; font-size: 1rem;">WebSocket</MudText>

                            }
                            else
                            {
                                <MudIcon Icon="@Icons.Material.Filled.FlashOn" Color="Color.Success" />
                                <MudText Color="Color.Success" Style="margin: 0; padding: 0; display: inline-block; font-size: 1rem;">SignalR</MudText>
                            }
                        </div>
                    </div>
                </MudPaper>

                <MudPaper Elevation="3"
                Class="py-4 px-4 my-2 mt-1 rounded-lg"
                Style="max-height: 50vh ; overflow-y: auto; border: 1px solid #555; background-color: #2e2e2e; color: white; position: relative;">

                    <div class="panel">
                        <div class="panel-display">
                            <div>
                                <MudTextField @bind-Value="topic"
                                Variant="Variant.Outlined"
                                Adornment="Adornment.End"
                                AdornmentText="Topic"
                                AdornmentColor="Color.Info"
                                Class="mb-4"
                                Style="background-color: #3b3b3b; color: #ffb74d;" />

                                <MudTextField @bind-Value="message"
                                Variant="Variant.Outlined"
                                Adornment="Adornment.End"
                                AdornmentIcon="@Icons.Material.Filled.Topic"
                                AdornmentText="Message"
                                AdornmentColor="Color.Secondary"
                                Style="background-color: #3b3b3b; color: #eeeeee;"
                                @onclick="StopTimer" />
                            </div>

                        </div>

                        <div class="panel-button" style="position: relative;">
                            <div class="panel-btn-send">
                                <MudButton Color="Color.Primary"
                                Variant="Variant.Filled"
                                EndIcon="@Icons.Material.Filled.Send"
                                IconColor="Color.Secondary"
                                Size="Size.Large"
                                OnClick="SendMessage"
                                Style="width: 100%">
                                    Send
                                </MudButton>
                            </div>

                            <div class="panel-btn-other">
                                <div class="panel-btn">
                                    <MudButton Color="Color.Success"
                                    Variant="Variant.Filled"
                                    StartIcon="@Icons.Material.Filled.Link"
                                    IconColor="Color.Secondary"
                                    Size="Size.Medium"
                                    OnClick="Connect"
                                    Style="width: 100%">
                                        Connect
                                    </MudButton>
                                </div>
                                <div class="panel-btn">
                                    <MudButton Color="Color.Warning"
                                    Variant="Variant.Filled"
                                    StartIcon="@Icons.Material.Filled.LinkOff"
                                    IconColor="Color.Dark"
                                    Size="Size.Medium"
                                    OnClick="Disconnect"
                                    Style="width: 100%">

                                        Disconnect
                                    </MudButton>
                                </div>
                                <div class="panel-btn">
                                    <MudButton Color="Color.Info"
                                    Variant="Variant.Filled"
                                    StartIcon="@Icons.Material.Filled.Add"
                                    IconColor="Color.Dark"
                                    Size="Size.Medium"
                                    OnClick="SubscribeTopic"
                                    Style="width: 100%">

                                        Subscribe
                                    </MudButton>
                                </div>
                                <div class="panel-btn">
                                    <MudButton Color="Color.Error"
                                    Variant="Variant.Filled"
                                    StartIcon="@Icons.Material.Filled.Remove"
                                    IconColor="Color.Dark"
                                    Size="Size.Medium"
                                    OnClick="UnsubscribeTopic"
                                    Style="width: 100%">

                                        Unsubscribe
                                    </MudButton>
                                </div>
                            </div>

                        </div>
                    </div>
                </MudPaper>

            </MudPaper>

            <MudPaper Outlined="true" Square="true" class="pa-4" Style="border: 1px solid #555; background-color: #2e2e2e; color: white;">
                <div class="panel-message" style="position: relative;">

                    <MudPaper Elevation="3"
                              Class="py-2 px-4 my-2 mt-1 rounded-lg"
                    Style="max-height: 40vh; min-height: 200px; overflow-y: auto; border: 2px solid #555; background-color: #2e2e2e; color: white; position: relative;">


                        @if (mqttMessages is null)
                        {
                            <div class="pa-2"
                            style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100%; min-height: 200px;">
                                <MudAlert Severity="Severity.Warning" Variant="Variant.Filled">
                                    Pobieranie z serwera...
                                </MudAlert>
                            </div>
                        }

                        else if (mqttMessages.Count > 0)
                        {
                            <div style="position: sticky; top: 0; display: flex; justify-content: flex-end; gap: 10px; background-color: transparent; z-index: 1; padding: 10px;">
                                <MudButton @onclick="OnClickFetchMessage" Color="Color.Success" Variant="Variant.Filled" Style="min-width: 30px; width: 30px; height: 30px;">
                                    <MudIcon Icon="@Icons.Material.Filled.Download" />
                                </MudButton>

                                <MudButton @onclick="OnClickDelete" Color="Color.Error" Variant="Variant.Filled" Style="min-width: 30px; width: 30px; height: 30px;">
                                    <MudIcon Icon="@Icons.Material.Filled.Delete" />
                                </MudButton>
                            </div>

                            <ul style="margin-top: -50px;">
                                @foreach (var message in MqttMessageService.Messages)
                                {
                                    <li>
                                        <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" Class="my-1">
                                            <span style="color:darkorange">
                                                @message.Topic:
                                            </span>
                                            <span style="color: darkgray">
                                                @message.Payload
                                            </span>
                                        </MudAlert>
                                    </li>
                                }
                            </ul>
                        }
                        else if(mqttMessages.Count == 0)
                        {
                            <div style="position: absolute; top: 15px; right: 15px; display: flex; gap: 10px;">
                                <MudButton @onclick="OnClickFetchMessage" Color="Color.Success" Variant="Variant.Filled" Style="min-width: 30px; width: 30px; height: 30px;">
                                    <MudIcon Icon="@Icons.Material.Filled.Download" />
                                </MudButton>
                            </div>

                            <div class="pa-2"
                            style="display: flex; flex-direction: column; justify-content: center; align-items: center; height: 100%; min-height: 200px; overflow: hidden;">
                                <MudAlert Severity="Severity.Normal" Variant="Variant.Filled" Style="overflow: hidden;">
                                    Message List Empty
                                </MudAlert>
                            </div>
                        }


                    </MudPaper>
                    <div style="height: 20vh; display: flex; justify-content: center; align-items: center;">
                        <MudButton Color="Color.Primary"
                        Variant="Variant.Filled"
                        StartIcon="@Icons.Material.Filled.ArrowBack"
                        Size="Size.Medium"
                        OnClick="NavigateBack"
                        Style="background-color: #3b3b3b; color: white;">
                            Back
                        </MudButton>
                    </div>

                </div>
            </MudPaper>
        </div>


    </section>
</div>

@code {
    private bool isClient = false;
    private int counter = 0;
    private Timer? timer;

    private InfoMessage infoMessage = new InfoMessage(false, string.Empty);
    private string platform;
    public string topic { get; set; } = "sensor1";

    public string message { get; set; } = string.Empty;
    public MqttMessage mqttMessage { get; set; } = new MqttMessage();

    private CancellationTokenSource? _cts;
    private List<MqttMessage>? mqttMessages = null;

    protected override void OnInitialized()
    {
        platform = OperatingSystem.IsBrowser() ? "WASM Render" : "Server Render";

        timer = new Timer(Timer1sEvent, null, 0, 1000);
    }

    protected override async Task OnInitializedAsync()
    {
        //start signalR connection implement on MqttMessageService, not on server MqttMessageService
        await MqttMessageService.StartAsync();

        mqttMessages = await MqttMessageService.GetMqttMessagesListAsync();

        MqttMessageService.OnMessageReceived += OnMessageReceived;
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // await Task.Delay(3000);

            try
            {
                // if not exception then isClient
                isClient = true;
            }
            catch
            {
                isClient = false;
            }
        }


    }


    private void Timer1sEvent(object? state)
    {
        message = $"Message: {DateTime.Now.ToString("HH:mm:ss")}";
        InvokeAsync(StateHasChanged);
    }

    private async Task SendMessage()
    {
        counter++;
        string showStatusMessage = "Wysyłanie wiadomości... ";
        MqttMessage tempMessage = new MqttMessage( topic, message );
        MqttMessage messagesList = new MqttMessage(topic, message);

        //set info message is sending
        message = showStatusMessage;
        StateHasChanged();
        var response = await MqttMessageService.SendMessageAsync(tempMessage);
        //after that, restore the original message and count time
        StartTimer();
        DisplayResponseMessage(response);
    }

    private async Task Connect()
    {
        var response = await MqttMessageService.ConnectAsync();
        DisplayResponseMessage(response);
    }

    private async Task Disconnect()
    {
        var response = await MqttMessageService.DisconnectAsync();
        DisplayResponseMessage(response);
    }

    private async Task SubscribeTopic()
    {
        var response = await MqttMessageService.SubscribeAsync(topic);
        DisplayResponseMessage(response);
    }

    private async Task UnsubscribeTopic()
    {
        var response = await MqttMessageService.UnsubscribeAsync(topic);
        DisplayResponseMessage(response);
    }

    private void SetInfoMessage(bool success, string message)
    {
        //cancel the previous timer if it exists
        _cts?.Cancel();
        _cts = new CancellationTokenSource();

        infoMessage.Message = message;
        infoMessage.Success = success;
        StateHasChanged();

        // set a new timer to clear the message after 5 seconds
        _ = Task.Run(async () =>
        {
            try
            {
                await Task.Delay(3000, _cts.Token);
                ClearInfoMessage(message);
            }
            catch (TaskCanceledException)
            {
                // client canceled the task, do nothing
            }
        });
    }

    private void ClearInfoMessage(string message)
    {
        // check if the message is the same as the one we want to clear
        if (infoMessage.Message == message)
        {
            infoMessage.Message = string.Empty;
            StateHasChanged();
        }
    }

    public void DisplayResponseMessage(MqttStatusResponse response)
    {
        if (response.Success)
        {
            SetInfoMessage(response.Success, response.MessageList.FirstOrDefault() ?? "Unknown info");
        }
        else
        {
            SetInfoMessage(response.Success, response.MessageList.FirstOrDefault() ?? "Unknown error");
        }
    }

    private void OnMessageReceived(MqttMessage message)
    {
        //only update the UI when OnMessageReceived is called - not fetch data, all is stored in MqttMessageService on client
        //all messages are storaged in MqttService on server - lifetime
        Console.WriteLine($"Received message: {message.Topic} - {message.Payload}");
        StateHasChanged();
    }

    private void StopTimer()
    {
        //stop timer
        timer?.Change(Timeout.Infinite, Timeout.Infinite);
        //set message to original
        message = string.Empty;
    }

    private void StartTimer()
    {
        timer?.Change(0, 1000);
    }

    private void OnClickDelete()
    {
        mqttMessages = MqttMessageService.Messages;

        Console.WriteLine($"mqttMessages.Count = {mqttMessages.Count} ");
        MqttMessageService.ClearMessageList();
        StateHasChanged();
    }

    private async Task OnClickFetchMessage()
    {
        await MqttMessageService.FetchMessagesAsync();
        //Fetch messages from MqttService to MqttMessageService or MqttMessageServiceServer
        var tempList = await MqttMessageService.GetMqttMessagesListAsync();
        MqttMessageService.Messages = tempList;

        StateHasChanged();

    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/device");
    }
}




