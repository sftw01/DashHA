@* @rendermode InteractiveServerRenderMode *@
@* @rendermode InteractiveServer *@

@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime
@inject ILogger<RenderInfoCard> _logger

<div class="status-card bg-white/10 backdrop-blur-md rounded-xl shadow-lg p-6 ring-1 ring-white/20" style="cursor: pointer;">
    <div style="position: absolute; top: 0; right: 0; cursor: pointer; z-index: 10;" @onclick="RefreshPage">
        <div class="drop-shadow-lg my-2 mx-2" style="font-size: 4rem; font-family: 'Segoe UI Emoji', 'Apple Color Emoji', 'Noto Color Emoji', sans-serif;">
            🔄
        </div>
    </div>

    <h1 class="drop-shadow-lg text-center py-4" style="font-size: 4rem; font-family: 'Segoe UI Emoji', 'Apple Color Emoji', 'Noto Color Emoji', sans-serif;">
        🔌
    </h1>
    <h2 class="text-3xl font-semibold text-blue-300">Połączenie</h2>

    <div class="flex items-center justify-center mt-4">
        @if (isClient)
        {
            <MudIcon Icon="@Icons.Material.Filled.Storage" Color="Color.Success" />
            <MudText Color="Color.Success" Style="font-size: 1rem;">@platform</MudText>
        }
        else
        {
            <MudIcon Icon="@Icons.Material.Filled.Computer" Color="Color.Info" />
            <MudText Color="Color.Info" Style="font-size: 1rem;">@platform</MudText>
        }

    </div>

    <div class="flex items-center justify-center mt-2">
        @if (!OperatingSystem.IsBrowser())
        {
            <MudIcon Icon="@Icons.Material.Filled.FlashOn" Color="Color.Info" />
            <MudText Color="Color.Warning" Style="font-size: 1rem;">WebSocket</MudText>
        }
        else
        {
            <MudIcon Icon="@Icons.Material.Filled.FlashOn" Color="Color.Success" />
            <MudText Color="Color.Success" Style="font-size: 1rem;">SignalR</MudText>
        }
    </div>
</div>

@code {
    private bool isClient = false;
    private string platform = "StaticServerRender";

    protected override void OnInitialized()
    {
        platform = OperatingSystem.IsBrowser() ? "WebAssembly" : "Server Render";
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("scrollToTop");
            try
            {
                isClient = true;
            }
            catch
            {
                isClient = false;
            }
        }
    }

    private void RefreshPage()
    {
        NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }
}
