@implements IDisposable

@inject NavigationManager NavigationManager


<!-- 🔹 TopBar -->
<header class="bg-gradient-to-r from-indigo-900 via-purple-900 to-pink-800 text-white shadow-md fixed top-0 left-0 w-full h-[8vh]"   style=" z-index: 100; background-color: #111111;">
    <div class="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8 h-full">
        <div class="flex justify-between items-center h-full">

            <div class="flex-shrink-0">
                <a href="/" class="text-2xl font-bold tracking-wide text-white hover:text-yellow-300 transition">
                    🧠 MQTT
                </a>
            </div>



            <div class="flex items-center gap-4">
                <AuthorizeView>
                    <Authorized>
                            <form action="Account/Logout" method="post">
                                <AntiforgeryToken />
                                <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                <button type="submit"
                                         class="bg-white/10 hover:bg-white/20 text-white font-semibold px-4 py-2 rounded-lg transition shadow">
                                    <span class="bi bi-arrow-bar-left-nav-menu" aria-hidden="true"></span> Logout
                                </button>
                            </form>
                    </Authorized>
                    <NotAuthorized>
                        <a href="/Account/Login"
                           class="bg-white/10 hover:bg-white/20 text-white font-semibold px-4 py-2 rounded-lg transition shadow">
                            Logowanie
                        </a>
                        <a href="/Account/Register"
                           class="bg-yellow-400 hover:bg-yellow-500 text-indigo-900 font-semibold px-4 py-2 rounded-lg shadow transition">
                            Rejestracja
                        </a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>


        </div>
    </div>
</header>


@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}