@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using DashHA.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Log in</PageTitle>


<TopBar />

<section class=" bg-gradient-to-br from-indigo-800 via-purple-800 to-pink-700 text-white min-h-[100vh] md:min-h-[calc(100vh] flex items-center justify-evenly pb-6">

    <div class="max-w-5xl text-center">
        <h1 style="font-size: 12rem;">
            🔑
        </h1>
        <h1 class="text-5xl font-extrabold leading-tight drop-shadow-lg">
            Logowanie
        </h1>
        <p class="mt-6 text-lg text-white/90 max-w-xl mx-auto">
            Zaloguj się lub zalóż konto.
        </p>

        <div class="mt-8 flex flex-col justify-center gap-4">

            <StatusMessage Message="@errorMessage" />
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />

                <!-- EMAIL -->
                <div class="mt-0">
                    <label for="Input.Email" class="relative block text-left">
                        <InputText @bind-Value="Input.Email"
                                   id="Input.Email"
                                   placeholder="Email"
                                   autocomplete="username"
                                   aria-required="true"
                                   class="w-full px-4 py-3 text-lg rounded border border-indigo-600 bg-indigo-900 text-white placeholder-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 transition" />
                    </label>
                    <ValidationMessage For="() => Input.Email" class="text-red-400 text-sm mt-1" />
                </div>

                <!-- PASSWORD -->
                <div class="mt-4">
                    <label for="Input.Password" class="relative block text-left">
                        <InputText type="password"
                                   @bind-Value="Input.Password"
                                   id="Input.Password"
                                   placeholder="Hasło"
                                   autocomplete="current-password"
                                   aria-required="true"
                                   class="w-full px-4 py-3 text-lg rounded border border-indigo-600 bg-indigo-900 text-white placeholder-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 transition" />
                    </label>
                    <ValidationMessage For="() => Input.Password" class="text-red-400 text-sm mt-1" />
                </div>

                <ValidationSummary class="text-red-500 mb-4 text-sm" role="alert" />


                <div class="checkbox my-1" style="text-align: left;" >
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>

                <div class="mt-8 flex flex-col justify-center gap-4">
                    <button type="submit" class="bg-yellow-400 hover:bg-yellow-500 text-indigo-900 font-bold px-6 py-3 rounded-lg shadow transition">Zaloguj</button>

                    <a href="Account/ForgotPassword" class="text-white underline hover:text-yellow-300 transition">
                        Zapomniałeś hasła?
                    </a>
                    <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))" class="border border-white/40 hover:bg-white/10 text-white font-medium px-6 py-3 rounded-lg shadow transition">
                        Rejestracja
                    </a>
                    <a href="Account/ResendEmailConfirmation" class="border border-white/40 hover:bg-white/10 text-white font-medium px-6 py-3 rounded-lg shadow transition">
                        Wyślij link aktywacyjny
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
</section>


<footer class="bg-gradient-to-br from-indigo-800 via-purple-800 to-pink-700 text-white py-8 px-4">
    <div class="max-w-6xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-6 text-center md:text-left">
        <div>
            <h3 class="text-xl font-bold mb-2">DashHA</h3>
            <p class="text-white/80">Twoja aplikacja do zarządzania domem i MQTT.</p>
        </div>

        <div>
            <h4 class="text-lg font-semibold mb-2">Linki</h4>
            <ul class="space-y-1 text-white/90">
                <li><a href="/" class="hover:text-yellow-300 transition">Strona główna</a></li>
                <li><a href="/account/login" class="hover:text-yellow-300 transition">Logowanie</a></li>
                <li><a href="/account/register" class="hover:text-yellow-300 transition">Rejestracja</a></li>
            </ul>
        </div>

        <div>
            <h4 class="text-lg font-semibold mb-2">Kontakt</h4>
            <p class="text-white/80">Email: <a href="mailto:kontakt@dashha.pl" class="hover:text-yellow-300 transition">kontakt@dashha.pl</a></p>
            <p class="text-white/80">© @DateTime.Now.Year DashHA. Wszelkie prawa zastrzeżone.</p>
        </div>
    </div>
</footer>



@code {
    private string? errorMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }



    public async Task LoginUser()
    {
        // This doesn't count login failures towards account lockout
        // To enable password failures to trigger account lockout, set lockoutOnFailure: true
        var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
        if (result.Succeeded)
        {
            Logger.LogInformation("User logged in.");
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else if (result.RequiresTwoFactor)
        {
            RedirectManager.RedirectTo(
                "Account/LoginWith2fa",
                new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
        }
        else if (result.IsLockedOut)
        {
            Logger.LogWarning("User account locked out.");
            RedirectManager.RedirectTo("Account/Lockout");
        }
        else
        {
            errorMessage = "Error: Invalid login attempt.";
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
}
