@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DashHA.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<TopBar />

<section class="bg-gradient-to-br from-indigo-800 via-purple-800 to-pink-700 text-white min-h-[100vh] md:min-h-[calc(100vh)] flex items-center justify-evenly pb-6">

    <div class="max-w-5xl text-center">
        <h1 style="font-size: 10rem;">📝</h1>
        <h1 class="text-5xl font-extrabold leading-tight drop-shadow-lg">
            Rejestracja
        </h1>
        <p class="mt-6 text-lg text-white/90 max-w-xl mx-auto">
            Załóż konto, aby korzystać z aplikacji.
        </p>

        <div class="mt-8 flex flex-col justify-center gap-4">
            <StatusMessage Message="@Message" />
            <EditForm Model="Input" method="post" OnValidSubmit="RegisterUser" FormName="register">
                <DataAnnotationsValidator />

                <!-- EMAIL -->
                <div class="mt-0">
                    <label for="Input.Email" class="relative block text-left">
                        <InputText @bind-Value="Input.Email"
                                   id="Input.Email"
                                   placeholder="Email"
                                   autocomplete="username"
                                   aria-required="true"
                                   class="w-full px-4 py-3 text-lg rounded border border-indigo-600 bg-indigo-900 text-white placeholder-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 transition" />
                    </label>
                    <ValidationMessage For="() => Input.Email" class="text-red-400 text-sm mt-1" />
                </div>

                <!-- PASSWORD -->
                <div class="mt-4">
                    <label for="Input.Password" class="relative block text-left">
                        <InputText type="password"
                                   @bind-Value="Input.Password"
                                   id="Input.Password"
                                   placeholder="Hasło"
                                   autocomplete="new-password"
                                   aria-required="true"
                                   class="w-full px-4 py-3 text-lg rounded border border-indigo-600 bg-indigo-900 text-white placeholder-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 transition" />
                    </label>
                    <ValidationMessage For="() => Input.Password" class="text-red-400 text-sm mt-1" />
                </div>

                <!-- CONFIRM PASSWORD -->
                <div class="mt-4">
                    <label for="Input.ConfirmPassword" class="relative block text-left">
                        <InputText type="password"
                                   @bind-Value="Input.ConfirmPassword"
                                   id="Input.ConfirmPassword"
                                   placeholder="Potwierdź hasło"
                                   autocomplete="new-password"
                                   aria-required="true"
                                   class="w-full px-4 py-3 text-lg rounded border border-indigo-600 bg-indigo-900 text-white placeholder-gray-300 shadow-sm focus:outline-none focus:ring-2 focus:ring-indigo-500 transition" />
                    </label>
                    <ValidationMessage For="() => Input.ConfirmPassword" class="text-red-400 text-sm mt-1" />
                </div>

                <ValidationSummary class="text-red-500 mb-4 text-sm" role="alert" />

                <div class="mt-8 flex flex-col justify-center gap-4">
                    <button type="submit" class="bg-yellow-400 hover:bg-yellow-500 text-indigo-900 font-bold px-6 py-3 rounded-lg shadow transition">
                        Zarejestruj
                    </button>

                    <a href="/Account/Login" class="text-white underline hover:text-yellow-300 transition">
                        Masz już konto? Zaloguj się
                    </a>
                </div>
            </EditForm>
        </div>
    </div>
</section>








@* <div class="row"> *@
@*     <div class="col-lg-6"> *@
@*         <StatusMessage Message="@Message" /> *@
@*         <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register"> *@
@*             <DataAnnotationsValidator /> *@
@*             <h2>Create a new account.</h2> *@
@*             <hr /> *@
@*             <ValidationSummary class="text-danger" role="alert" /> *@
@*             <div class="form-floating mb-3"> *@
@*                 <InputText @bind-Value="Input.Email" id="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" /> *@
@*                 <label for="Input.Email">Email</label> *@
@*                 <ValidationMessage For="() => Input.Email" class="text-danger" /> *@
@*             </div> *@
@*             <div class="form-floating mb-3"> *@
@*                 <InputText type="password" @bind-Value="Input.Password" id="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" /> *@
@*                 <label for="Input.Password">Password</label> *@
@*                 <ValidationMessage For="() => Input.Password" class="text-danger" /> *@
@*             </div> *@
@*             <div class="form-floating mb-3"> *@
@*                 <InputText type="password" @bind-Value="Input.ConfirmPassword" id="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" /> *@
@*                 <label for="Input.ConfirmPassword">Confirm Password</label> *@
@*                 <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" /> *@
@*             </div> *@
@*             <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button> *@
@*         </EditForm> *@
@*     </div> *@
@*     <div class="col-lg-4 col-lg-offset-2"> *@
@*         <section> *@
@*             <h3>Use another service to register.</h3> *@
@*             <hr /> *@
@*             <ExternalLoginPicker /> *@
@*         </section> *@
@*     </div> *@
@* </div> *@





@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.Email, CancellationToken.None);
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password.");

        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        if (UserManager.Options.SignIn.RequireConfirmedAccount)
        {
            RedirectManager.RedirectTo(
                "Account/RegisterConfirmation",
                new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        }

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";
    }
}
